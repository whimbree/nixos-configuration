version: "3.9"
services:

  wireguard-arr:
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard-arr
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /lib/modules:/lib/modules:ro
      - /services/arr/wireguard:/config:Z
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
    restart: unless-stopped
    networks:
      - arr
    healthcheck:
      test: curl --fail https://checkip.amazonaws.com | grep 185.213.154 || exit 1
      interval: 30s
      retries: 10
      start_period: 10s
      timeout: 2s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=arr"
      # Sonarr
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.bspwr.com`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.routers.sonarr.middlewares=default@file"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # Radarr
      - "traefik.http.routers.radarr.rule=Host(`radarr.bspwr.com`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.routers.radarr.middlewares=default@file"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      # Bazarr
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.bspwr.com`)"
      - "traefik.http.routers.bazarr.entrypoints=websecure"
      - "traefik.http.routers.bazarr.tls=true"
      - "traefik.http.routers.bazarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.bazarr.service=bazarr"
      - "traefik.http.routers.bazarr.middlewares=default@file"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
      # Lidarr
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.bspwr.com`)"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.lidarr.service=lidarr"
      - "traefik.http.routers.lidarr.middlewares=default@file"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
      # Readarr
      - "traefik.http.routers.readarr.rule=Host(`readarr.bspwr.com`)"
      - "traefik.http.routers.readarr.entrypoints=websecure"
      - "traefik.http.routers.readarr.tls=true"
      - "traefik.http.routers.readarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.readarr.service=readarr"
      - "traefik.http.routers.readarr.middlewares=default@file"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"
      # Prowlarr
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.bspwr.com`)"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.tls=true"
      - "traefik.http.routers.prowlarr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prowlarr.service=prowlarr"
      - "traefik.http.routers.prowlarr.middlewares=default@file"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      # Jellyseerr
      - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.bspwr.com`)"
      - "traefik.http.routers.jellyseerr.entrypoints=websecure"
      - "traefik.http.routers.jellyseerr.tls=true"
      - "traefik.http.routers.jellyseerr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jellyseerr.service=jellyseerr"
      - "traefik.http.routers.jellyseerr.middlewares=default@file"
      - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"

  delugevpn:
    image: binhex/arch-delugevpn
    container_name: delugevpn
    privileged: true
    environment:
      - VPN_ENABLED=yes
      - VPN_PROV=custom
      - VPN_CLIENT=wireguard
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK=192.168.1.0/24,100.64.0.2/32,172.17.0.0/12
      - NAME_SERVERS=1.1.1.1,1.0.0.1
      - DELUGE_DAEMON_LOG_LEVEL=info
      - DELUGE_WEB_LOG_LEVEL=info
      - DELUGE_ENABLE_WEBUI_PASSWORD=yes
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /lib/modules:/lib/modules:ro
      - /etc/localtime:/etc/localtime:ro
      - /services/arr/delugevpn:/config
      - /ocean/downloads:/downloads:z
    restart: unless-stopped
    networks:
      - arr
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
    healthcheck:
      test: curl --fail localhost:8112 && curl --fail https://checkip.amazonaws.com | grep 185.213.154 || exit 1
      interval: 30s
      retries: 10
      start_period: 10s
      timeout: 2s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=arr"
      - "traefik.http.routers.deluge.rule=Host(`deluge.bspwr.com`)"
      - "traefik.http.routers.deluge.entrypoints=websecure"
      - "traefik.http.routers.deluge.tls=true"
      - "traefik.http.routers.deluge.tls.certresolver=letsencrypt"
      - "traefik.http.routers.deluge.service=deluge"
      - "traefik.http.routers.deluge.middlewares=default@file"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"

  # TV
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /services/arr/sonarr:/config:Z
      - /ocean/media/shows:/shows:z
      - /ocean/downloads:/downloads:z
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: curl --fail localhost:8989 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Movies
  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /services/arr/radarr:/config:Z
      - /ocean/media/movies:/movies:z
      - /ocean/downloads:/downloads:z
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: curl --fail localhost:7878 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Subtitles
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /services/arr/bazarr:/config:Z
      - /ocean/media/movies:/movies:z
      - /ocean/downloads:/tv:z
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: curl --fail localhost:6767 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Music
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /services/arr/lidarr:/config:Z
      - /ocean/media/music:/music:z
      - /ocean/downloads:/downloads:z
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: curl --fail localhost:8686 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Books
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /services/arr/readarr:/config:Z
      - /ocean/media/books:/books:z
      - /ocean/downloads:/downloads:z
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: curl --fail localhost:8787 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Indexer Manager
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=1420
      - PGID=1420
      - TZ=America/New_York
    volumes:
      - /services/arr/prowlarr:/config:Z
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: curl --fail localhost:9696 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Media Request Manager for Jellyfin
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - TZ=America/New_York
    volumes:
      - /services/arr/jellyseerr:/app/config
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:5055 || exit 1
      interval: 10s
      retries: 6
      start_period: 10s
      timeout: 2s

  # Proxy server to bypass Cloudflare protection
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - TZ=America/New_York
    depends_on:
      - wireguard-arr
    network_mode: service:wireguard-arr
    restart: unless-stopped

networks:
  arr:
    name: arr
    external: true